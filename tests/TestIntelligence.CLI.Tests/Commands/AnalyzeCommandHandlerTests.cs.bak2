using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using NSubstitute;
using TestIntelligence.CLI.Commands;
using TestIntelligence.CLI.Services;
using Xunit;

namespace TestIntelligence.CLI.Tests.Commands
{
    public class AnalyzeCommandHandlerTests
    {
        private readonly ILogger<AnalyzeCommandHandler> _mockLogger;
        private readonly IAnalysisService _mockAnalysisService;
        private readonly CommandContext _mockContext;
        private readonly AnalyzeCommandHandler _handler;

        public AnalyzeCommandHandlerTests()
        {
            _mockLogger = Substitute.For<ILogger<AnalyzeCommandHandler>>();
            _mockAnalysisService = Substitute.For<IAnalysisService>();
            _mockContext = Substitute.For<CommandContext>();
            _handler = new AnalyzeCommandHandler(_mockLogger);
        }

        [Fact]
        public void Constructor_WithNullLogger_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new AnalyzeCommandHandler(null!));
        }

        [Fact]
        public async Task ExecuteAsync_WithValidParameters_CallsAnalysisService()
        {
            // Arrange
            var path = "/test/path";
            var output = "/test/output";
            var format = "json";
            var verbose = true;

            _mockContext.HasParameter("path").Returns(true);
            _mockContext.GetParameter<string>("path").Returns(path);
            _mockContext.GetParameter<string>("output").Returns(output);
            _mockContext.GetParameter<string>("format").Returns(format);
            _mockContext.GetParameter<bool>("verbose").Returns(verbose);
            _mockContext.GetService<IAnalysisService>().Returns(_mockAnalysisService);

            _mockAnalysisService.AnalyzeAsync(path, output, format, verbose).Returns(Task.CompletedTask);

            // Act
            var result = await _handler.ExecuteAsync(_mockContext);

            // Assert
            Assert.Equal(0, result);
            _mockAnalysisService.Received(1).AnalyzeAsync(path, output, format, verbose);
        }

        [Fact]
        public async Task ExecuteAsync_WithMissingPath_ThrowsArgumentException()
        {
            // Arrange
            _mockContext.HasParameter("path").Returns(false);

            // Act & Assert
            var result = await _handler.ExecuteAsync(_mockContext);
            Assert.Equal(1, result); // Error exit code
        }

        [Fact]
        public async Task ExecuteAsync_WithNullPath_ThrowsArgumentException()
        {
            // Arrange
            _mockContext.HasParameter("path").Returns(true);
            _mockContext.GetParameter<string>("path").Returns((string?)null);

            // Act
            var result = await _handler.ExecuteAsync(_mockContext);

            // Assert
            Assert.Equal(1, result); // Error exit code
        }

        [Fact]
        public async Task ExecuteAsync_WithEmptyPath_ThrowsArgumentException()
        {
            // Arrange
            _mockContext.Setup(x => x.HasParameter("path")).Returns(true);
            _mockContext.Setup(x => x.GetParameter<string>("path")).Returns(string.Empty);

            // Act
            var result = await _handler.ExecuteAsync(_mockContext);

            // Assert
            Assert.Equal(1, result); // Error exit code
        }

        [Fact]
        public async Task ExecuteAsync_WithDefaultFormat_UsesTextFormat()
        {
            // Arrange
            var path = "/test/path";
            
            _mockContext.Setup(x => x.HasParameter("path")).Returns(true);
            _mockContext.Setup(x => x.GetParameter<string>("path")).Returns(path);
            _mockContext.Setup(x => x.GetParameter<string>("output")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<string>("format")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<bool>("verbose")).Returns(false);
            _mockContext.Setup(x => x.GetService<IAnalysisService>()).Returns(_mockAnalysisService);

            _mockAnalysisService
                .Setup(x => x.AnalyzeAsync(path, null, "text", false))
                .Returns(Task.CompletedTask);

            // Act
            var result = await _handler.ExecuteAsync(_mockContext);

            // Assert
            Assert.Equal(0, result);
            _mockAnalysisService.Verify(x => x.AnalyzeAsync(path, null, "text", false), Times.Once);
        }

        [Fact]
        public async Task ExecuteAsync_WhenAnalysisServiceThrows_ReturnsErrorCode()
        {
            // Arrange
            var path = "/test/path";
            
            _mockContext.Setup(x => x.HasParameter("path")).Returns(true);
            _mockContext.Setup(x => x.GetParameter<string>("path")).Returns(path);
            _mockContext.Setup(x => x.GetParameter<string>("output")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<string>("format")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<bool>("verbose")).Returns(false);
            _mockContext.Setup(x => x.GetService<IAnalysisService>()).Returns(_mockAnalysisService);

            _mockAnalysisService
                .Setup(x => x.AnalyzeAsync(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<bool>()))
                .ThrowsAsync(new InvalidOperationException("Analysis failed"));

            // Act
            var result = await _handler.ExecuteAsync(_mockContext);

            // Assert
            Assert.Equal(1, result); // Error exit code
        }

        [Fact]
        public async Task ExecuteAsync_WhenCancelled_ReturnsCancelledCode()
        {
            // Arrange
            var path = "/test/path";
            var cancellationToken = new CancellationToken(true);
            
            _mockContext.Setup(x => x.HasParameter("path")).Returns(true);
            _mockContext.Setup(x => x.GetParameter<string>("path")).Returns(path);
            _mockContext.Setup(x => x.GetParameter<string>("output")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<string>("format")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<bool>("verbose")).Returns(false);
            _mockContext.Setup(x => x.GetService<IAnalysisService>()).Returns(_mockAnalysisService);

            _mockAnalysisService
                .Setup(x => x.AnalyzeAsync(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<bool>()))
                .ThrowsAsync(new OperationCanceledException());

            // Act
            var result = await _handler.ExecuteAsync(_mockContext, cancellationToken);

            // Assert
            Assert.Equal(130, result); // Cancelled exit code
        }
    }
}