using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using NSubstitute;
using TestIntelligence.CLI.Commands;
using TestIntelligence.CLI.Services;
using Xunit;

namespace TestIntelligence.CLI.Tests.Commands
{
    public class CallGraphCommandHandlerTests
    {
        private readonly ILogger<CallGraphCommandHandler> _mockLogger;
        private readonly ICallGraphService _mockCallGraphService;
        private readonly CommandContext _mockContext;
        private readonly CallGraphCommandHandler _handler;

        public CallGraphCommandHandlerTests()
        {
            _mockLogger = Substitute.For<ILogger<CallGraphCommandHandler>>();
            _mockCallGraphService = Substitute.For<ICallGraphService>();
            _mockContext = Substitute.For<CommandContext>();
            _handler = new CallGraphCommandHandler(_mockLogger);
        }

        [Fact]
        public void Constructor_WithNullLogger_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new CallGraphCommandHandler(null!));
        }

        [Fact]
        public async Task ExecuteAsync_WithValidParameters_CallsCallGraphService()
        {
            // Arrange
            var path = "/test/path";
            var output = "/test/output";
            var format = "json";
            var verbose = true;
            var maxMethods = 100;

            _mockContext.Setup(x => x.HasParameter("path")).Returns(true);
            _mockContext.Setup(x => x.GetParameter<string>("path")).Returns(path);
            _mockContext.Setup(x => x.GetParameter<string>("output")).Returns(output);
            _mockContext.Setup(x => x.GetParameter<string>("format")).Returns(format);
            _mockContext.Setup(x => x.GetParameter<bool>("verbose")).Returns(verbose);
            _mockContext.Setup(x => x.GetParameter<int?>("max-methods")).Returns(maxMethods);
            _mockContext.Setup(x => x.GetService<ICallGraphService>()).Returns(_mockCallGraphService.Object);

            _mockCallGraphService
                .Setup(x => x.AnalyzeCallGraphAsync(path, output, format, verbose, maxMethods))
                .Returns(Task.CompletedTask);

            // Act
            var result = await _handler.ExecuteAsync(_mockContext.Object);

            // Assert
            Assert.Equal(0, result);
            _mockCallGraphService.Verify(x => x.AnalyzeCallGraphAsync(path, output, format, verbose, maxMethods), Times.Once);
        }

        [Fact]
        public async Task ExecuteAsync_WithMissingPath_ReturnsErrorCode()
        {
            // Arrange
            _mockContext.Setup(x => x.HasParameter("path")).Returns(false);

            // Act
            var result = await _handler.ExecuteAsync(_mockContext.Object);

            // Assert
            Assert.Equal(1, result); // Error exit code
        }

        [Fact]
        public async Task ExecuteAsync_WithDefaultParameters_UsesDefaults()
        {
            // Arrange
            var path = "/test/path";
            
            _mockContext.Setup(x => x.HasParameter("path")).Returns(true);
            _mockContext.Setup(x => x.GetParameter<string>("path")).Returns(path);
            _mockContext.Setup(x => x.GetParameter<string>("output")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<string>("format")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<bool>("verbose")).Returns(false);
            _mockContext.Setup(x => x.GetParameter<int?>("max-methods")).Returns((int?)null);
            _mockContext.Setup(x => x.GetService<ICallGraphService>()).Returns(_mockCallGraphService.Object);

            _mockCallGraphService
                .Setup(x => x.AnalyzeCallGraphAsync(path, null, "text", false, null))
                .Returns(Task.CompletedTask);

            // Act
            var result = await _handler.ExecuteAsync(_mockContext.Object);

            // Assert
            Assert.Equal(0, result);
            _mockCallGraphService.Verify(x => x.AnalyzeCallGraphAsync(path, null, "text", false, null), Times.Once);
        }

        [Fact]
        public async Task ExecuteAsync_WhenCallGraphServiceThrows_ReturnsErrorCode()
        {
            // Arrange
            var path = "/test/path";
            
            _mockContext.Setup(x => x.HasParameter("path")).Returns(true);
            _mockContext.Setup(x => x.GetParameter<string>("path")).Returns(path);
            _mockContext.Setup(x => x.GetParameter<string>("output")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<string>("format")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<bool>("verbose")).Returns(false);
            _mockContext.Setup(x => x.GetParameter<int?>("max-methods")).Returns((int?)null);
            _mockContext.Setup(x => x.GetService<ICallGraphService>()).Returns(_mockCallGraphService.Object);

            _mockCallGraphService
                .Setup(x => x.AnalyzeCallGraphAsync(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<int?>()))
                .ThrowsAsync(new InvalidOperationException("Call graph analysis failed"));

            // Act
            var result = await _handler.ExecuteAsync(_mockContext.Object);

            // Assert
            Assert.Equal(1, result); // Error exit code
        }

        [Fact]
        public async Task ExecuteAsync_WhenCancelled_ReturnsCancelledCode()
        {
            // Arrange
            var path = "/test/path";
            var cancellationToken = new CancellationToken(true);
            
            _mockContext.Setup(x => x.HasParameter("path")).Returns(true);
            _mockContext.Setup(x => x.GetParameter<string>("path")).Returns(path);
            _mockContext.Setup(x => x.GetParameter<string>("output")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<string>("format")).Returns((string?)null);
            _mockContext.Setup(x => x.GetParameter<bool>("verbose")).Returns(false);
            _mockContext.Setup(x => x.GetParameter<int?>("max-methods")).Returns((int?)null);
            _mockContext.Setup(x => x.GetService<ICallGraphService>()).Returns(_mockCallGraphService.Object);

            _mockCallGraphService
                .Setup(x => x.AnalyzeCallGraphAsync(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<bool>(), It.IsAny<int?>()))
                .ThrowsAsync(new OperationCanceledException());

            // Act
            var result = await _handler.ExecuteAsync(_mockContext.Object, cancellationToken);

            // Assert
            Assert.Equal(130, result); // Cancelled exit code
        }
    }
}